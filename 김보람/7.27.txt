#include <stdio.h>
#include <windows.h>

#define size 16

#define MARK 1
#define init ' '

int number;
char arr[size][size];

void Init(char(*arr)[size]);
void find(char (*arr)[size], int row[], int col[]);
void insertArr(char(*arr)[size], int row[], int col[]);
void firePattern(char(*arr)[size], int row[], int col[]);   
void firePatternErase(char(*arr)[size], int row[], int col[]);
void print(char (*arr)[size]);


int main()
{
	int row[2]={4,11}, col[2]={4,11};
	insertArr(arr,row,col);
	find(arr,row,col);

	while(1)
	{
		firePattern(arr,row,col);
		//firePatternErase(arr,row,col);
	}

	return 0;
}


void Init(char (*arr)[size])
{
	int i, j;
	for( i=0; i<size; i++)
	{
		for( j=0; j<size; j++)
		{
			arr[i][j]=' ';
		}
	}
}

void insertArr(char (*arr)[size] )
{
	arr[2][2] = MARK;
	arr[8][8] = MARK;
	arr[6][7] = MARK;
	arr[11][11] = MARK;
}

void find(char (*arr)[size], int row[], int col[])
{
	int i=0, j=0, sum = 0;
	for(i=0; i<size; i++)
	{
		for(j=0; j<size; j++)
		{
			if( arr[i][j] == 1 )
			{
				*row++ = i;
				*col++ = j;
				number++;
			}
		}
	}
}

void firePattern(char (*arr)[size], int row[], int col[])
{
	int i, j;
	int isFullBoundary = 0;
	
	for(j = 0; j < number ; j++)
	{
		for(i = 0; i < 4; i++)
		{
			isFullBoundary = arr[0][*col] && arr[size-1][*col] && arr[*row][0] && arr[*row][size-1];

			if( !isFullBoundary )
			break;

			// 위
			if( *(row+j) - i > -1 )
				arr[ *(row+j)-i ][ *(col+j)   ] = MARK;

			// 위 왼쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) - i > -1)
				arr[ *(row+j)-i ][ *(col+j)-i ] = MARK;

			// 아래 왼쪽 대각선
			if( *(row+j) + i < size && *(col+j) - i > -1)
				arr[ *(row+j)+i ][ *(col+j)-i ] = MARK;

			// 아래
			if( *(row+j) + i  < size )
				arr[ *(row+j)+i ][ *(col+j)   ] = MARK;

			// 아래 오른쪽 대각선
			if( *(row+j) + i < size && *(col+j) + i < size)
				arr[ *(row+j)+i ][ *(col+j)+i ] = MARK;

			// 왼쪽
			if( *(col+j) - i > -1 )
				arr[ *(row+j)	][ *(col+j)-i ] = MARK;

			// 오른쪽
			if( *(col+j) + i < size )
				arr[ *(row+j)	][ *(col+j)+i ] = MARK;

			// 위 오른쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) + i < size)
				arr[ *(row+j)-i ][ *(col+j)+i ] = MARK;
		
			Sleep(500);
			print(arr);	
		}
		Init(arr);
	}
}


void firePatternErase(char (*arr)[size], int row[], int col[])
{
	int i, j;
	int isFullBoundary = 0;
	
	for(j = 0; j < number ; j++)
	{
		for(i = 0; i < 4; i++)
		{
			// 위
			if( *(row+j) - i > -1 )
				arr[ *(row+j)-i ][ *(col+j)   ] = MARK;
				arr[*(row+j)-i+1][ *(col+j)	  ] = init;

			// 위 왼쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) - i > -1)
				arr[ *(row+j)-i ][ *(col+j)-i ] = MARK;
				arr[*(row+j)-i+1][*(col+j)-i+1] = init;

			// 아래 왼쪽 대각선
			if( *(row+j) + i < size && *(col+j) - i > -1)
				arr[ *(row+j)+i ][ *(col+j)-i ] = MARK;
				arr[*(row+j)+i-1][*(col+j)-i+1] = init;

			// 아래
			if( *(row+j) + i  < size )
				arr[ *(row+j)+i ][ *(col+j)   ] = MARK;
				arr[*(row+j)+i-1][ *(col+j)   ] = init;

			// 아래 오른쪽 대각선
			if( *(row+j) + i < size && *(col+j) + i < size)
				arr[ *(row+j)+i ][ *(col+j)+i ] = MARK;
				arr[*(row+j)+i-1][*(col+j)+i-1] = init;

			// 왼쪽
			if( *(col+j) - i > -1 )
				arr[ *(row+j)	][ *(col+j)-i ] = MARK;
				arr[ *(row+j)	][*(col+j)-i+1] = init;

			// 오른쪽
			if( *(col+j) + i < size )
				arr[ *(row+j)	][ *(col+j)+i ] = MARK;
				arr[ *(row+j)	][*(col+j)+i-1] = init;

			// 위 오른쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) + i < size)
				arr[ *(row+j)-i ][ *(col+j)+i ] = MARK;
				arr[*(row+j)-i+1][*(col+j)+i-1] = init;
		
			Sleep(500);
			print(arr);
		}	
		Init(arr);
	}	
}

void firePatternPingpong(char (*arr)[size], int row[], int col[])
{
	int i, j;
	int isFullBoundary = 0;
	
		for(i = 0; i < size; i++)
		{
			// 위
			if( *(row+j) - i > -1 )
				arr[ *(row+j)-i ][ *(col+j)   ] = MARK;

			// 위 왼쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) - i > -1)
				arr[ *(row+j)-i ][ *(col+j)-i ] = MARK;

			// 아래 왼쪽 대각선
			if( *(row+j) + i < size && *(col+j) - i > -1)
				arr[ *(row+j)+i ][ *(col+j)-i ] = MARK;

			// 아래
			if( *(row+j) + i  < size )
				arr[ *(row+j)+i ][ *(col+j)   ] = MARK;

			// 아래 오른쪽 대각선
			if( *(row+j) + i < size && *(col+j) + i < size)
				arr[ *(row+j)+i ][ *(col+j)+i ] = MARK;

			// 왼쪽
			if( *(col+j) - i > -1 )
				arr[ *(row+j)	][ *(col+j)-i ] = MARK;

			// 오른쪽
			if( *(col+j) + i < size )
				arr[ *(row+j)	][ *(col+j)+i ] = MARK;

			// 위 오른쪽 대각선
			if( *(row+j) - i > -1 && *(col+j) + i < size)
				arr[ *(row+j)-i ][ *(col+j)+i ] = MARK;
		
			Sleep(500);
			print(arr);	
		}
		Init(arr);
}

void print(char (*arr)[size] )
{
	int i, j;
	system("cls");
	for( i=0; i<size; i++)
	{
		for(j=0; j<size; j++)
		{
			printf("%c" ,arr[i][j]);
		}
		printf("\n");
	}

}
