#include <stdio.h>
#include <memory.h>

#include <Windows.h>

#define MAX_SIZE 16
#define SPACE ' '
#define WALL 'O'

void setting(char (*arr)[MAX_SIZE], char ch);
void setting2(char (*arr)[MAX_SIZE], char ch);
void display(char (*arr)[MAX_SIZE], char* tmpArr);
void rightMove(char (*arr)[MAX_SIZE], char* tmpArr);
void leftMove(char (*arr)[MAX_SIZE], char* tmpArr);
void upMove(char (*arr)[MAX_SIZE], char* tmpArr);
void downMove(char (*arr)[MAX_SIZE], char* tmpArr);

int isCollisionWall_right(char (*arr)[MAX_SIZE]);
int isCollisionWall_left(char (*arr)[MAX_SIZE]);
int isCollisionWall_up(char (*arr)[MAX_SIZE]);
int isCollisionWall_down(char (*arr)[MAX_SIZE]);

int main()
{
   char arr[MAX_SIZE][MAX_SIZE];
   char tmpArr[MAX_SIZE];
   int flag = 1;
   memset(arr, SPACE, sizeof(arr));
   
   setting(arr, WALL);
   //setting2(arr, WALL);

   while(1) {
      display(arr, tmpArr);
      /*if(flag) upMove(arr, tmpArr);
      else    leftMove(arr, tmpArr);*/
      if(flag) {
         upMove(arr, tmpArr);
      } else {
         downMove(arr, tmpArr);
      }
      rightMove(arr, tmpArr);
      flag = 1-flag;
      Sleep(100);
      system("cls");
      /*if(isCollisionWall_up(arr) || isCollisionWall_left(arr)) {
         flag = 1-flag;
      }*/
   }

   return 0;
}

int isCollisionWall_up(char (*arr)[MAX_SIZE])
{
   int i;
   int sum = 0;
   for(i=0; i<MAX_SIZE; i++) {
      sum += arr[0][i];
   }

   if(SPACE*MAX_SIZE == sum) return 0;
   else                 return 1;
}

int isCollisionWall_down(char (*arr)[MAX_SIZE])
{
   int i;
   int sum = 0;
   for(i=0; i<MAX_SIZE; i++) {
      sum += arr[MAX_SIZE-2][i];
   }

   if(SPACE*MAX_SIZE == sum) return 0;
   else                 return 1;
}

int isCollisionWall_right(char (*arr)[MAX_SIZE])
{
   int i;
   int sum = 0;
   for(i=0; i<MAX_SIZE; i++) {
      sum += arr[i][MAX_SIZE-1];
   }

   if(SPACE*MAX_SIZE == sum) return 0;
   else                 return 1;
}

int isCollisionWall_left(char (*arr)[MAX_SIZE])
{
   int i;
   int sum = 0;
   for(i=0; i<MAX_SIZE; i++) {
      sum += arr[i][0];
   }

   if(SPACE*MAX_SIZE == sum) return 0;
   else                 return 1;
}

void rightMove(char (*arr)[MAX_SIZE], char* tmpArr)
{
   int i, j;
   
   for(i=0; i<MAX_SIZE; i++) {
      tmpArr[i] = arr[i][MAX_SIZE-1];
   }

   for(j=MAX_SIZE-2; j>=0; j--) {
      for(i=0; i<MAX_SIZE; i++) {
         arr[i][j+1] = arr[i][j];
      }
   }

   for(i=0; i<MAX_SIZE; i++) {
      arr[i][0] = tmpArr[i];
   }
}

void leftMove(char (*arr)[MAX_SIZE], char* tmpArr)
{
   int i, j;
   
   for(i=0; i<MAX_SIZE; i++) {
      tmpArr[i] = arr[i][0];
   }

   for(j=1; j<MAX_SIZE; j++) {
      for(i=0; i<MAX_SIZE; i++) {
         arr[i][j-1] = arr[i][j];
      }
   }

   for(i=0; i<MAX_SIZE; i++) {
      arr[i][MAX_SIZE-1] = tmpArr[i];
   }
}

void upMove(char (*arr)[MAX_SIZE], char* tmpArr)
{
   int i, j;

   memcpy(tmpArr, arr[0], MAX_SIZE);

   for(i=1; i<MAX_SIZE; i++) {
      memcpy(arr[i-1], arr[i], MAX_SIZE);
   }

   memcpy(arr[MAX_SIZE-1], tmpArr, MAX_SIZE);
}

void downMove(char (*arr)[MAX_SIZE], char* tmpArr)
{
   int i, j;

   memcpy(tmpArr, arr[MAX_SIZE-1], MAX_SIZE);

   for(i=MAX_SIZE-2; i>=0; i--) {
      memcpy(arr[i+1], arr[i], MAX_SIZE);
   }

   memcpy(arr[0], tmpArr, MAX_SIZE);
}

void setting(char (*arr)[MAX_SIZE], char ch)
{
   arr[8][0] = ch;
   arr[9][0] = ch;
   arr[10][0] = ch;
   arr[8][1] = ch;
   arr[9][1] = ch;
   arr[10][1] = ch;
   arr[8][2] = ch;
   arr[9][2] = ch;
   arr[10][2] = ch;
}

void setting2(char (*arr)[MAX_SIZE], char ch)
{
   int i, j;
   for(i=1; i<=9; i++) {
      if(i<=5) {
         for(j=1; j<=9; j++) { 
            if(j<=5-i || j>=i+5) {
               //printf(" ");
            } else{
               //printf("*");
               arr[i][j] = ch;
            }
         }
      } else{
         for(j=9; j>=1; j--) { 
            if(j>=9-(i-6) || j<=i-5){
               //printf(" ");
            } else{
               //printf("*");
               arr[i][j] = ch;
            }
         }
      }
   }
}

void display(char (*arr)[MAX_SIZE], char* tmpArr)
{
   int i, j;

   for(i=0; i<MAX_SIZE; i++) {
      for(j=0; j<MAX_SIZE; j++) {
         printf("%c ", arr[i][j]);
      } printf("\n");
   }
}


