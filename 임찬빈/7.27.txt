latchpin = holdpin
clockpin = shiftpin

val =1;
val =2;
val =4;
val =8; 
val =16;                                             
val =32;                                             
val =64;
val =128;


*****쉬프 레지스터 2개로 도트매트릭스 16핀 연결 하기

LED 핀번호           쉬프트 핀번호

9                              15//
14                              1//
8                               2//
12                              3//
1                               4//
7                               5//
2                               6//
5                               7//



LED 핀번호            쉬프트 핀번호

13                               15//
3                                 1//
4                                 2//
10                                3//
6                                 4//
11                                5//
15                                6//
16                                7//

    저항연결 LED포트
    16 15 13 10 9
     1  4 6 
  

LED 8 개 순차적 점등


//Pin connected to ST_CP of 74HC595
int ShiftPin_1 = 8;
int latchPin2 =4;
//Pin connected to SH_CP of 74HC595
int clockPin1 = 12;
int clockPin2=7;
////Pin connected to DS of 74HC595
int dataPin1 = 11;
int dataPin2 = 6;
int val ;
int cnt =0;
int pinMap[]={1,2,4,8,16,32,64,128,256};
void setup() {
        pinMode(latchPin, OUTPUT);
        pinMode(clockPin, OUTPUT);
        pinMode(dataPin, OUTPUT);}
void loop(){
   
        digitalWrite(latchPin, LOW);
        shiftOut(dataPin, clockPin, MSBFIRST, pinMap[cnt]); 
        digitalWrite(latchPin, HIGH);
             cnt++;
             delay(50);
            if(cnt==8)
           {cnt=0;} 
       
  }
*************쉬프트 레지스터 2개로 8x8 도트 매트릭스 O ->X 오엑스 반복 하기 아두이노 코드
//Pin connected to ST_CP of 74HC595
int HoldPin_1 = 8;
int HoldPin_2 = 4;
//Pin connected to SH_CP of 74HC595
int ShiftPin_1 = 12;
int ShiftPin_2 = 7;
////Pin connected to DS of 74HC595
int DataPin_1 = 11;
int DataPin_2 = 6;


#define numOfRegisterPins 8

boolean registers[numOfRegisterPins];

void setup(){
  pinMode(DataPin_1, OUTPUT);
  pinMode(HoldPin_1, OUTPUT);
  pinMode(ShiftPin_1, OUTPUT);
  
  pinMode(DataPin_2, OUTPUT);
  pinMode(HoldPin_2, OUTPUT);
  pinMode(ShiftPin_2, OUTPUT);

  //reset all register pins
  clearMatrix();
  writeMatrix(1);
  writeMatrix(2);
  
  delay(1);
}              

//set all register pins to HIGH
void clearMatrix(){
  for(int i = numOfRegisterPins - 1; i >=  0; i--){
     registers[i] = HIGH;
  }
}

/* set 74HC595 and out
    index:1 - select row shift register
    index:2 - select column shift register */
void writeMatrix(int index){
  if (index == 1) {
    digitalWrite(HoldPin_1, LOW);
    for(int i = numOfRegisterPins - 1 ; i >= 0; i--){
      digitalWrite(ShiftPin_1, LOW);
      int val = registers[i];
      digitalWrite(DataPin_1, val);
      digitalWrite(ShiftPin_1, HIGH);
    }
    digitalWrite(HoldPin_1, HIGH);
  }
  else if (index == 2) {
    digitalWrite(HoldPin_2, LOW);
    for(int i = numOfRegisterPins - 1; i >= 0; i--){
      digitalWrite(ShiftPin_2, LOW);
      int val = registers[i];
      digitalWrite(DataPin_2, val);
      digitalWrite(ShiftPin_2, HIGH);
    }
    digitalWrite(HoldPin_2, HIGH);
  } else {
    //nothing
  }
}

/* Set one line register
    line: line number
    dot[8]: LED set to On/Off */
void setLineMatrix(int line, boolean dot[8]) {
    
  clearMatrix(); //prevent flicker
  writeMatrix(2);
  
  boolean col[8] = {0,0,0,0,0,0,0,0};
  col[line] = 1; // select one line
  for (int i = 0; i < 8; i++) { //set line
    registers[i] = col[i];
  }
  writeMatrix(1);
  for (int i = 0; i < 8; i++) { //set dots
    registers[i] = dot[i];
  }
  writeMatrix(2);
  delay(1); //delay for readability
}

/* set matrix
    dot[8][8]: matrix array
    delay: display time (ms) */
void setFullMatrixTime(boolean dot[8][8], int mdelay) {
  boolean col[8] = {};
  int i,j;
  unsigned long endTimer = millis() + mdelay;
  
  while(millis() < endTimer) {
    for (i = 0; i < 8; i++) {
      for (j = 0; j < 8; j++) {
        col[j] = dot[i][j];      
      }
      setLineMatrix(i, col);    
    }
  }
}

void loop(){
  //temp array for testing
  boolean dot0[8][8] = {{1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1}};
                        
  boolean dot1[8][8] = {{0,1,1,1,1,1,1,0},
                        {1,0,1,1,1,1,0,1},
                        {1,1,0,1,1,0,1,1},
                        {1,1,1,0,0,1,1,1},
                        {1,1,1,0,0,1,1,1},
                        {1,1,0,1,1,0,1,1},
                        {1,0,1,1,1,1,0,1},
                        {0,1,1,1,1,1,1,0},};
  
   boolean dot2[8][8] = {{1,1,0,0,0,0,1,1},
                         {1,0,1,1,1,1,0,1},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {1,0,1,1,1,1,0,1},
                         {1,1,0,0,0,0,1,1},};
  // display during 1 second
  setFullMatrixTime(dot0,1000);
  setFullMatrixTime(dot1,1000);
  setFullMatrixTime(dot2,1000);
}


블루투스로 a넣으면 멈추는 안넣으면 o x 반복
#include <SoftwareSerial.h>
SoftwareSerial BTSerial(2, 9); //Connect HC-06 TX,RX
//RX 핀 6번 꽂읅
//Pin connected to ST_CP of 74HC595
int HoldPin_1 = 8;
int HoldPin_2 = 4;
//Pin connected to SH_CP of 74HC595
int ShiftPin_1 = 12;
int ShiftPin_2 = 7;
////Pin connected to DS of 74HC595
int DataPin_1 = 11;
int DataPin_2 = 6;


#define numOfRegisterPins 8

boolean registers[numOfRegisterPins];

void setup(){
  Serial.begin(9600);
  Serial.println("Hello!");
  BTSerial.begin(9600);
  
  pinMode(DataPin_1, OUTPUT);
  pinMode(HoldPin_1, OUTPUT);
  pinMode(ShiftPin_1, OUTPUT);
  
  pinMode(DataPin_2, OUTPUT);
  pinMode(HoldPin_2, OUTPUT);
  pinMode(ShiftPin_2, OUTPUT);

  //reset all register pins
  clearMatrix();
  writeMatrix(1);
  writeMatrix(2);
  
  delay(1);
}              

//set all register pins to HIGH
void clearMatrix(){
  for(int i = numOfRegisterPins - 1; i >=  0; i--){
     registers[i] = HIGH;
  }
}

/* set 74HC595 and out
    index:1 - select row shift register
    index:2 - select column shift register */
void writeMatrix(int index){
  if (index == 1) {
    digitalWrite(HoldPin_1, LOW);
    for(int i = numOfRegisterPins - 1 ; i >= 0; i--){
      digitalWrite(ShiftPin_1, LOW);
      int val = registers[i];
      digitalWrite(DataPin_1, val);
      digitalWrite(ShiftPin_1, HIGH);
    }
    digitalWrite(HoldPin_1, HIGH);
  }
  else if (index == 2) {
    digitalWrite(HoldPin_2, LOW);
    for(int i = numOfRegisterPins - 1; i >= 0; i--){
      digitalWrite(ShiftPin_2, LOW);
      int val = registers[i];
      digitalWrite(DataPin_2, val);
      digitalWrite(ShiftPin_2, HIGH);
    }
    digitalWrite(HoldPin_2, HIGH);
  } else {
    //nothing
  }
}

/* Set one line register
    line: line number
    dot[8]: LED set to On/Off */
void setLineMatrix(int line, boolean dot[8]) {
    
  clearMatrix(); //prevent flicker
  writeMatrix(2);
  
  boolean col[8] = {0,0,0,0,0,0,0,0};
  col[line] = 1; // select one line
  for (int i = 0; i < 8; i++) { //set line
    registers[i] = col[i];
  }
  writeMatrix(1);
  for (int i = 0; i < 8; i++) { //set dots
    registers[i] = dot[i];
  }
  writeMatrix(2);
  delay(1); //delay for readability
}

/* set matrix
    dot[8][8]: matrix array
    delay: display time (ms) */
void setFullMatrixTime(boolean dot[8][8], int mdelay) {
  boolean col[8] = {};
  int i,j;
  unsigned long endTimer = millis() + mdelay;
  
  while(millis() < endTimer) {
    for (i = 0; i < 8; i++) {
      for (j = 0; j < 8; j++) {
        col[j] = dot[i][j];      
      }
      setLineMatrix(i, col);    
    }
  }
}

void loop(){
  //temp array for testing
  boolean dot0[8][8] = {{1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1}};
                        
  boolean dot1[8][8] = {{0,1,1,1,1,1,1,0},
                        {1,0,1,1,1,1,0,1},
                        {1,1,0,1,1,0,1,1},
                        {1,1,1,0,0,1,1,1},
                        {1,1,1,0,0,1,1,1},
                        {1,1,0,1,1,0,1,1},
                        {1,0,1,1,1,1,0,1},
                        {0,1,1,1,1,1,1,0},};
  
   boolean dot2[8][8] = {{1,1,0,0,0,0,1,1},
                         {1,0,1,1,1,1,0,1},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {0,1,1,1,1,1,1,0},
                         {1,0,1,1,1,1,0,1},
                         {1,1,0,0,0,0,1,1},};
  // display during 1 second
  
   if(BTSerial.available()) {
      char toSend = (char)BTSerial.read();
      if(1){
      if(toSend=='a'){
      setFullMatrixTime(dot0,1000);
      delay(2000);
      };}
      else{

      };
      
      
      
   }
  setFullMatrixTime(dot0,1000);
  setFullMatrixTime(dot1,1000);
  setFullMatrixTime(dot2,1000);
}


